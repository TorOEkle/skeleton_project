# üßπ Kodstil & Lintning med Ruff

Det h√§r projektet anv√§nder [Ruff](https://docs.astral.sh/ruff/) f√∂r att automatiskt h√•lla v√•r Python-kod snygg, konsekvent och felfri. Vi anv√§nder √§ven [Black](https://black.readthedocs.io/) f√∂r automatisk kodformatering.

## üì¶ Installation

### 1. Installera Ruff, Black och pre-commit

Installera [Ruff](https://docs.astral.sh/ruff/), [Black](https://black.readthedocs.io/) och [pre-commit](https://pre-commit.com) med pip (g√§rna i en virtuell milj√∂):

```bash
pip install ruff black pre-commit
```

### 2. Skapa `.pre-commit-config.yaml` i projektets rotmapp

L√§gg till f√∂ljande inneh√•ll i `.pre-commit-config.yaml` f√∂r att anv√§nda b√•de Ruff och Black:

```yaml
repos:
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.11.11  # Anv√§nd samma version som din Ruff-installation
    hooks:
      - id: ruff
        args: [--fix, --select=I]
        types_or: [python, pyi, jupyter]
  - repo: https://github.com/psf/black
    rev: 25.1.0  # Kontrollera senaste versionen
    hooks:
      - id: black
```

### 4. Skapa  `pyproject.toml` i projektets rotmapp

Ruff konfigureras via filen `pyproject.toml`. Vi anv√§nder f√∂ljande inst√§llningar:

```toml
[tool.ruff]
line-length = 120

[tool.ruff.lint]
select = ["E", "F", "I"]

[tool.ruff.lint.isort]
combine-as-imports = true
force-sort-within-sections = true
lines-after-imports = 2
order-by-type = false
case-sensitive = false
force-wrap-aliases = true
split-on-trailing-comma = true
relative-imports-order = "closest-to-furthest"
known-first-party = ["assets", "functions", "resources"]

[tool.black]
line-length = 120
```
#### Ruff linter beskrivning
* `E`: kodstil enligt PEP8
* `F`: felkontroller med Pyflakes
* `I`: importsortering enligt isort

---

## üöÄ Anv√§ndning

Nu kommer Ruff och Black att k√∂ras automatiskt varje g√•ng du k√∂r:

```bash
git commit -m "Min commit"
```

Om Ruff eller Black hittar n√•got fel kommer commiten att stoppas tills du √•tg√§rdar det ‚Äì eller s√• fixas det direkt automatiskt.


### Manuellt: kontrollera och fixa kod

```bash
ruff check .             # Visa problem
ruff check . --fix       # Fixa problem automatiskt
```

### Kontrollera en specifik fil

```bash
ruff check src/my_file.py --fix
```

---

## üìñ Beskrivningar av verktyg

### Git pre-commit hooks (automatisering) - Vad √§r det?

En **Git pre-commit hook** k√∂rs **innan du g√∂r en commit**, f√∂r att se till att du inte committar kod som bryter mot projektets kodstandard.

### Varf√∂r anv√§nder vi det?

* Alla i teamet f√•r samma kodstil ‚Äì utan att beh√∂va t√§nka p√• det
* Inget gl√∂ms ‚Äì Ruff k√∂rs automatiskt varje g√•ng
* Renare och mer professionella commits

## üí° Tips

* Anv√§nd ett kodformat med st√∂d f√∂r Ruff och Black (t.ex. VS Code med Ruff och Black plugin)
* L√§gg till `ruff check .` i din CI/CD pipeline
* Anv√§nd `--fix` f√∂r att slippa manuellt pilla med importordning
